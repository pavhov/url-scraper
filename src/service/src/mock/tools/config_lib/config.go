// Code generated by MockGen. DO NOT EDIT.
// Source: src\service\src\tools\config_lib\config.go

// Package mock_config is a generated GoMock package.
package mock_config

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockInterface) Get(k string) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", k)
	ret0, _ := ret[0].(any)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockInterfaceMockRecorder) Get(k interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInterface)(nil).Get), k)
}

// Init mocks base method.
func (m *MockInterface) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockInterfaceMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockInterface)(nil).Init))
}

// defineConfig mocks base method.
func (m *MockInterface) defineConfig(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "defineConfig", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// defineConfig indicates an expected call of defineConfig.
func (mr *MockInterfaceMockRecorder) defineConfig(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "defineConfig", reflect.TypeOf((*MockInterface)(nil).defineConfig), path)
}

// prepareConfigs mocks base method.
func (m *MockInterface) prepareConfigs(data *map[string]any, key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "prepareConfigs", data, key)
}

// prepareConfigs indicates an expected call of prepareConfigs.
func (mr *MockInterfaceMockRecorder) prepareConfigs(data, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "prepareConfigs", reflect.TypeOf((*MockInterface)(nil).prepareConfigs), data, key)
}

// setArr mocks base method.
func (m *MockInterface) setArr(skey, swap string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setArr", skey, swap)
}

// setArr indicates an expected call of setArr.
func (mr *MockInterfaceMockRecorder) setArr(skey, swap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setArr", reflect.TypeOf((*MockInterface)(nil).setArr), skey, swap)
}

// setBoll mocks base method.
func (m *MockInterface) setBoll(skey, swap string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setBoll", skey, swap)
}

// setBoll indicates an expected call of setBoll.
func (mr *MockInterfaceMockRecorder) setBoll(skey, swap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setBoll", reflect.TypeOf((*MockInterface)(nil).setBoll), skey, swap)
}

// setFloat mocks base method.
func (m *MockInterface) setFloat(skey, swap string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setFloat", skey, swap)
}

// setFloat indicates an expected call of setFloat.
func (mr *MockInterfaceMockRecorder) setFloat(skey, swap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setFloat", reflect.TypeOf((*MockInterface)(nil).setFloat), skey, swap)
}
